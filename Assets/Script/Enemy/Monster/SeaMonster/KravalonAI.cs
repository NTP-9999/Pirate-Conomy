using UnityEngine;
using UnityEngine.UI;
public class KravalonAI : MonoBehaviour
{
    [HideInInspector] public KravalonStateMachine StateMachine;
    [HideInInspector] public KravalonChaseState chaseState;
    [HideInInspector] public KravalonAttackState attackState;

    [Header("Health")]
    public float maxHealth = 200f;
    private float currentHealth;
    public Animator animator;

    public Transform shipTarget => ShipEnterExit.Instance?.transform;
    public float moveSpeed = 5f;
    public float attackRange = 5f;
    public float attackCooldown = 3f;
    public float damage = 40f;
    public float stoppingDistance = 3f;
    public float rotationSpeed = 5f;
    [Header("Exit Settings")]
    [Tooltip("‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà Kravalon ‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏•‡πà‡πÄ‡∏£‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô")]
    public float exitRange = 30f;
    [Header("Health Bar UI")]
    [Tooltip("GameObject Panel ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö Image ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏î")]
    public GameObject healthBarUI;
    [Tooltip("Image Type=Filled, Fill Method=Horizontal")]
    public Image     healthBarFill;

    private float lastAttackTime = -Mathf.Infinity;

    void Awake()
    {
        StateMachine = new KravalonStateMachine();
        chaseState = new KravalonChaseState(this);
        attackState = new KravalonAttackState(this);
        currentHealth = maxHealth;
    }

    void Start()
    {
        StateMachine.Initialize(chaseState);
        CameraShake.Instance.Shake(2f, 0.5f);
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏•‡πà‡∏Å‡πà‡∏≠‡∏ô
        
        KravalonAudioManager.Instance.PlayOneShot(KravalonAudioManager.Instance.spawnSFX);
    }
    

    void Update()
    {
        UpdateHealthBar();
        if (Vector3.Distance(transform.position, shipTarget.position) > exitRange)
        {
            ExitAndDespawn();
            return;
        }
        float dist = Vector3.Distance(transform.position, shipTarget.position);
        if (dist > exitRange)
        {
            // ‡∏ã‡πà‡∏≠‡∏ô UI ‡∏Å‡πà‡∏≠‡∏ô
            if (healthBarUI != null)
                healthBarUI.SetActive(false);

            ExitAndDespawn();
            return;
        }

        if (currentHealth <= 0)
        {
            Die();
            return;
        }
        RotateTowardsShip(Time.deltaTime);      // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        StateMachine.Update();
    }

    
    private void UpdateHealthBar()
    {
        if (healthBarUI == null || healthBarFill == null || shipTarget == null)
            return;

        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô exitRange
        float dist = Vector3.Distance(transform.position, shipTarget.position);
        bool inRange = dist <= exitRange;
        healthBarUI.SetActive(inRange);

        if (inRange)
        {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï fillAmount ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            healthBarFill.fillAmount = currentHealth / maxHealth;
        }
    }


    public bool IsShipInAttackRange()
    {
        return Vector3.Distance(transform.position, shipTarget.position) <= attackRange;
    }

    public bool IsAttackCooldownReady()
    {
        return Time.time >= lastAttackTime + attackCooldown;
    }
    public bool IsShipInStoppingDistance()
    {
        return Vector3.Distance(transform.position, shipTarget.position) <= stoppingDistance;
    }
    /// <summary>
    /// ‡∏´‡∏°‡∏∏‡∏ô Kravalon ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡∏≠ ‡πÇ‡∏î‡∏¢‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏Å‡∏ô Y
    /// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô State Logic
    /// </summary>
    public void RotateTowardsShip(float deltaTime)
    {
        if (shipTarget == null) return;
        // 1) ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
        Vector3 dir = shipTarget.position - transform.position;
        // 2) ‡∏•‡πá‡∏≠‡∏Ñ Y
        dir.y = 0f;
        if (dir.sqrMagnitude < 0.0001f) return;
        // 3) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì rotation ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        Quaternion targetRot = Quaternion.LookRotation(dir);
        // 4) ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏´‡∏°‡∏∏‡∏ô
        transform.rotation = Quaternion.Slerp(
            transform.rotation,
            targetRot,
            deltaTime * rotationSpeed     // rotationSpeed ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô KravalonAI
        );
    }
    public void SetAttackCooldown()
    {
        lastAttackTime = Time.time;
    }

    public void DealDamageToShip()
    {
        if (shipTarget.TryGetComponent<ShipStats>(out var stats))
        {
            stats.TakeDamage(damage);
        }
    }

    public void TakeDamage(float amount)
    {
        currentHealth -= amount;
        Debug.Log($"Kravalon ‡πÇ‡∏î‡∏ô‡∏¢‡∏¥‡∏á! HP: {currentHealth}");
    }

    void Die()
    {
       
        animator.SetTrigger("Die");
        Debug.Log("üíÄ Kravalon ‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
        Destroy(gameObject, 2f);
    }
    /// <summary>
    /// ‡πÉ‡∏´‡πâ Kravalon ‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÇ‡∏î‡∏¢ Raycast ‡∏´‡∏≤ ground) ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    /// </summary>
    private void ExitAndDespawn()
    {
        // 1) Raycast ‡∏•‡∏á‡∏´‡∏≤‡∏û‡∏∑‡πâ‡∏ô
        if (Physics.Raycast(transform.position, Vector3.down, out RaycastHit hit, Mathf.Infinity))
        {
            Vector3 p = transform.position;
            p.y = hit.point.y;
            transform.position = p;
        }

        // 2) (‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡∏ô‡∏ô‡∏≠‡∏•) ‡∏õ‡∏•‡∏î NavMeshAgent / ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å
        // var agent = GetComponent<NavMeshAgent>();
        // if (agent != null) agent.isStopped = true;
        // animator.SetTrigger("HitGround");

        // 3) ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        Destroy(gameObject);
    }
}
